#!/usr/bin/env ruby
# SPDX-FileCopyrightText: Copyright (c) 2017-2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

STDOUT.sync = true
XML_PATTERNS = ['**/*.xml', '**/*.xsd', '**/*.xsl', '**/*.xhtml', '**/*.html'].freeze
XML_EXTENSIONS = ['.xml', '.xsd', '.xsl', '.xhtml', '.html'].freeze

require 'slop'
require 'nokogiri'
require 'set'
require_relative '../lib/xcop/cli'
require_relative '../lib/xcop/version'

if Gem::Version.new(Nokogiri::VERSION) < Gem::Version.new('1.8')
  puts "Nokogiri version #{Nokogiri::VERSION} is too old, 1.8+ is required"
end

def config(path)
  f = File.expand_path(path)
  args = []
  args += File.readlines(f).map(&:strip) if File.exist?(f)
  args
end

def paths(arguments)
  arguments.map { |f| File.expand_path(f) }
end

def include_files(paths, to_include)
  return if to_include.nil? || to_include.empty?
  to_include.each { |glob| paths.concat(Dir.glob(glob, File::FNM_DOTMATCH).map { |f| File.expand_path(f) }) }
end

def expand(paths)
  original_paths = paths.dup
  paths.clear
  original_paths.each do |path|
    case
    when File.directory?(path)
      XML_PATTERNS.each { |pattern| paths.concat(Dir.glob(File.join(path, pattern), File::FNM_DOTMATCH)) }
    when File.file?(path)
      paths << path
    else
      raise "Path does not exist: #{path}"
    end
  end
end

def filter(files)
  files.select! do |file|
    XML_EXTENSIONS.any? { |ext| file.end_with?(ext) }
  end
end

def exclude(files, exclude_patterns)
  return if exclude_patterns.nil? || exclude_patterns.empty?
  files.reject! do |file|
    exclude_patterns.any? do |pattern|
      if File.exist?(pattern)
        if File.directory?(pattern)
          file.start_with?(File.expand_path(pattern))
        else
          File.expand_path(file) == File.expand_path(pattern)
        end
      else
        File.fnmatch?(pattern, file, File::FNM_PATHNAME) ||
        File.fnmatch?(pattern, File.basename(file), File::FNM_PATHNAME) ||
        File.fnmatch?("**/#{pattern}", file, File::FNM_PATHNAME)
      end
    end
  end
end

args = config('~/.xcop') + config('.xcop') + ARGV

opts = Slop.parse(args, strict: true, help: true) do |o|
  o.banner = "Usage (#{Xcop::VERSION}): xcop [options] [files...]"
  o.bool '-h', '--help', 'Show these instructions'
  o.bool '-q', '--quiet', 'Don\'t print anything if there are no errors'
  o.bool '--version', 'Show current version'
  o.bool '--fix', 'Fix all files instead of reporting their problems'
  o.bool '--nocolor', 'Suppress colored output'
  o.array '--include', 'Glob pattern(s) to include'
  o.array '--exclude', 'Glob pattern(s) to exclude'
end

if opts.help?
  puts opts
  exit
end

if opts.version?
  puts Xcop::VERSION
  exit
end

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

paths = paths(opts.arguments)
include_files(paths, opts[:include])
expand(paths)
filter(paths)
paths.uniq!
exclude(paths, opts[:exclude])

if opts.fix?
  Xcop::CLI.new(paths).fix do |f|
    puts "#{f} fixed" unless opts.quiet?
  end
else
  begin
    Xcop::CLI.new(paths, nocolor: opts.nocolor?).run do |f|
      puts "#{f} looks good" unless opts.quiet?
    end
  rescue StandardError => e
    puts e.message
    exit 1
  end
end
